const game = {
    levs: 0,
    levsPerClick: 1,
    levsPerSecond: 0,
    totalLevsMined: 0,
    clickCount: 0,
    lastSave: Date.now(),
    
    upgrades: [
        {
            id: 'farm',
            name: '–∑–∞–µ–¥–Ω–∏—á–∫–∞ —Ñ–∞—Ä–º–∞',
            description: '–≥–∏ –∑–≥–æ–ª–µ–º—É–≤–∞ –ª–µ–≤–æ–≤–∏—Ç–µ –ø–æ –∫–ª–∏–∫',
            baseCost: 15,
            level: 0,
            maxLevel: 25,
            effect: level => level * 1,
            emoji: 'üåæ'  
        },
        {
            id: 'selo',
            name: '—Ü–∏–≥–∞–Ω—Å–∫–∞ –Ω–∞—Å–µ–ª–±–∞',
            description: '—Ñ–∞–±—Ä–∏–∫–∞ –∑–∞ –∫—Ä–µ–∫',
            baseCost: 100,
            level: 0,
            maxLevel: 15,
            effect: level => level * 1,
            emoji: 'üèöÔ∏è'  
        },
        {
            id: 'fabrika',
            name: '—Ñ–∞–±—Ä–∏–∫–∞',
            description: '–∫—É–ø–∏ —Ñ–∞–±—Ä–∏–∫–∞ –Ω–∞ –≥—Ä–∞–¥ "–°–¢–ê–†–ê –ó–ê–ì–û–†–ê"',
            baseCost: 1100,
            level: 0,
            maxLevel: 10,
            effect: level => level * 8,
            emoji: 'üè≠'  
        },
        {
            id: 'embezzlement',
            name: '–ø—Ä–æ–Ω–µ–≤–µ—Ä–∞',
            description: '–ü—Ä–æ–Ω–µ–≤–µ—Ä—É–≤–∞–ª–µ –ø–∞—Ä–∏ –æ–¥ –ø—Ä–æ–µ–∫—Ç–æ—Ç –∑–∞ –∞–≤—Ç–æ–ø–∞—Ç',
            baseCost: 12000,
            level: 0,
            maxLevel: 10,
            effect: level => level * 50,
            emoji: 'üí∞'  
        },
        {
            id: 'oligarch',
            name: '—Å—Ç–∞–Ω–µ –æ–ª–∏–≥–∞—Ä—Ö',
            description: '—Å—Ç–∞–Ω–µ –¥–µ–ª—ò–∞–Ω –ø–µ–µ–≤—Å–∫–∏',
            baseCost: 130000,
            level: 0,
            maxLevel: 1,
            effect: level => level * 470,
            emoji: 'üëî'  
        },
        {
            id: 'win',
            name: '—Ñ–∞–±—Ä–∏–∫–∞ –Ω–∞ –ª–µ–≤–∞',
            description: '–º–∞—Å–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥—É–≤–∞ –ª–µ–≤–∏',
            baseCost: 999999,
            level: 0,
            maxLevel: 5,
            effect: level => level * 470,
            emoji: 'üè¶'  
        }
    ],
    
    achievements: [
        {
            id: 'first_lev',
            name: '–ø—Ä–≤ –ª–µ–≤',
            description: '–≥–æ –¥–æ–±–∏ —Ç–≤–æ—ò–æ—Ç –ø—Ä–≤ –ª–µ–≤',
            icon: '–ª–≤.',
            unlocked: false,
            check: () => game.totalLevsMined >= 1
        },
        {
            id: 'capitalist',
            name: '—Ä–∏–∑–∏—á–µ–Ω –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç',
            description: '–∑–µ–º–∞ 1.000 –ª–µ–≤–∞ –æ–¥ —Å–∏—Ä–æ–º–∞—à–Ω–∏—Ç–µ –ª—É—ì–µ',
            icon: 'üí∂',
            unlocked: false,
            check: () => game.totalLevsMined >= 1000
        },
        {
            id: 'councilman',
            name: '–∏–¥–∏ –Ω–∞—Ö—É–π',
            description: '–ø—Ä–æ–Ω–µ–≤–µ—Ä–∏ 10.000 –ª–µ–≤–∞ –æ–¥ –≥—Ä–∞–¥–æ—Ç',
            icon: 'üè¶',
            unlocked: false,
            check: () => game.levs >= 10000
        },
        {
            id: 'pieceofshit',
            name: '—Ç–∏ —Å–∏ –æ—Ç —Å—Ç–∞—Ä–∞ –∑–∞–≥–æ—Ä–∞,–±–≥',
            description: '–¥–æ–∫–∞—Ç–æ –º—ä–¥—Ä–∏—Ç–µ —Å–µ –Ω–∞–º—ä–¥—Ä—É–≤–∞—Ç, –ª—É–¥–∏—Ç–µ —Å–µ –Ω–∞–ª—É–¥—É–≤–∞—Ç',
            icon: 'üçÜ',
            unlocked: false,
            check: () => game.levs >= 10000
        },
        {
            id: 'childlabour',
            name: '–¥–µ—Ç—Å–∫–∏ —Ç—Ä—É–¥',
            description: '–∫–∏–Ω–µ—Å–∫–∏—Ç–µ –±–µ–±–∏—ö–∞ –∫–ª–∏–∫–Ω–∞–ª–µ 500 –ø–∞—Ç–∏',
            icon: 'üëÜ',
            unlocked: false,
            check: () => game.clickCount >= 500
        },
        {
            id: 'spy',
            name: '—à–ø–∏–æ–Ω',
            description: '—Ç–∏ —Å–∏ —Ä—É—Å–∫–∏ —à–ø–∏–æ–Ω–∏–Ω –±–æ–Ω–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –º–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∏',
            icon: 'üá∑üá∫',
            unlocked: false,
            check: () => {
                const totalUpgrades = game.upgrades.reduce((sum, upgrade) => sum + upgrade.level, 0);
                return totalUpgrades >= 25;
            }
        },
        {
            id: 'oligarx',
            name: '–æ–ª–∏–≥–∞—Ä—Ö',
            description: '–∑–∞–±—Ä–∞–Ω–µ–Ω —Ç–∏ –µ –¥–æ—Å—Ç—ä–ø—ä—Ç –¥–æ –°–ê–©',
            icon: 'üí∏',
            unlocked: false,
            check: () => game.levsPerSecond >= 100
        }
    ]
};

document.addEventListener('DOMContentLoaded', function() {
  const audio = document.getElementById('bgMusic');
  const muteButton = document.getElementById('muteToggle');
  const muteIcon = document.getElementById('muteIcon');
  const muteStatus = document.getElementById('muteStatus');

  audio.load();

  const savedMuteState = localStorage.getItem('audioMuted');
  audio.muted = savedMuteState === 'true';
  muteIcon.src = audio.muted ? 'mute.png' : 'unmuted.png';
  muteStatus.textContent = audio.muted ? '–ó–ê–ì–õ–£–®–ï–ù' : '–∏–≥—Ä–∞—ò—ú–∏ —ò–∞ ‚ÄûPOV: –°—Ç—ä–ø–≤–∞—à –≤—ä–≤ —Å–∫–æ–ø–∏–µ" –æ–¥ –ù–∞—ò—ü–µ–ª –§–∞—Ä–∞–∂';
  muteButton.style.display = 'flex';

  muteButton.addEventListener('click', function(e) {
    e.stopPropagation();
    audio.muted = !audio.muted;
    muteIcon.src = audio.muted ? 'mute.png' : 'unmuted.png';
    muteStatus.textContent = audio.muted ? '–ó–ê–ì–õ–£–®–ï–ù' : '–∏–≥—Ä–∞—ò—ú–∏ —ò–∞ ‚ÄûPOV: –°—Ç—ä–ø–≤–∞—à –≤—ä–≤ —Å–∫–æ–ø–∏–µ" –æ–¥ –ù–∞—ò—ü–µ–ª –§–∞—Ä–∞–∂';
    localStorage.setItem('audioMuted', audio.muted);
    
    if (!audio.muted) {
      audio.play().catch(e => console.log("Playback failed:", e));
    }
    
    console.log("–Ω–∞—Å—Ä–∞ –π–¥ –≥ –Ω–∞", audio.muted);
  });
  
  try {
    if (!audio.muted) {
      audio.play().catch(e => console.log("Initial playback failed:", e));
    }
  } catch (error) {
    console.log("–∏–º–∞ –µ—Ä—Ä–æ—Ä", error);
  }
});

document.getElementById('reset-button').addEventListener('click', function() {
    if (confirm('–î–ê–õ–ò –°–ò –°–ò–ì–£–†–ï–ù? –å–ï –ì–ò –ò–ó–ì–£–ë–ò–® –°–ò–¢–ï –ü–ê–†–ò –ò –ù–ê–î–ì–†–ê–î–ë–ò!')) {
        localStorage.removeItem('levMinerSave');
        localStorage.removeItem('audioMuted');
        
        game.levs = 0;
        game.levsPerClick = 1;
        game.levsPerSecond = 0;
        game.totalLevsMined = 0;
        game.clickCount = 0;
        game.lastSave = Date.now();
        
        game.upgrades.forEach(upgrade => {
            upgrade.level = 0;
        });
        
        game.achievements.forEach(achievement => {
            achievement.unlocked = false;
        });
        
        const audio = document.getElementById('bgMusic');
        audio.muted = false;
        document.getElementById('muteIcon').src = 'unmuted.png';
        document.getElementById('muteStatus').textContent = '–∏–≥—Ä–∞—ò—ú–∏ —ò–∞ ‚ÄûPOV: –°—Ç—ä–ø–≤–∞—à –≤—ä–≤ —Å–∫–æ–ø–∏–µ" –æ–¥ –ù–∞—ò—ü–µ–ª –§–∞—Ä–∞–∂';
        
        updateDisplay();
        renderUpgrades();
        renderAchievements();
        renderInventory();
        
        showNotification('–ü–†–û–ì–†–ï–°–û–¢ –ï –†–ï–°–ï–¢–ò–†–ê–ù! –ü–û–ß–ù–ò –ü–û–í–¢–û–†–ù–û!');
    }
});

const levCountElement = document.getElementById('lev-count');
const levsPerClickElement = document.getElementById('levs-per-click');
const levsPerSecondElement = document.getElementById('levs-per-second');
const mineButton = document.getElementById('mine-btn');
const upgradesList = document.getElementById('upgrades-list');
const achievementsGrid = document.getElementById('achievements-grid');
const inventoryGrid = document.getElementById('inventory-grid');
const notification = document.getElementById('notification');

function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(2) + '–º–∏–ª';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(2) + '—Ö–∏–ª';
    } else {
        return Math.floor(num);
    }
}

function calculateUpgradeCost(upgrade) {
    return Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.level));
}

function updateDisplay() {
    levCountElement.textContent = formatNumber(game.levs);
    levsPerClickElement.textContent = formatNumber(game.levsPerClick);
    levsPerSecondElement.textContent = formatNumber(game.levsPerSecond);
}

function renderUpgrades() {
    upgradesList.innerHTML = '';
    
    game.upgrades.forEach(upgrade => {
        const cost = calculateUpgradeCost(upgrade);
        const canAfford = game.levs >= cost;
        const isMaxed = upgrade.level >= upgrade.maxLevel;
        
        const upgradeElement = document.createElement('div');
        upgradeElement.className = `upgrade-item ${(!canAfford || isMaxed) ? 'disabled' : ''}`;
        
        let description = upgrade.description;
        if (isMaxed) {
            description = '–°–¢–û–ü! –¥–æ—Å—Ç–∞ –≤–µ—ú–µ, –¥–µ–±–µ–ª–∞–∫–æ';
        }
        
        upgradeElement.innerHTML = `
            <div class="upgrade-info">
                <div class="upgrade-name">${upgrade.name}</div>
                <div class="upgrade-description">${description}</div>
            </div>
            <div class="upgrade-cost">${isMaxed ? '–ú–ê–ö–°' : formatNumber(cost) + ' –ª–≤.'}</div>
            <div class="upgrade-level">${upgrade.level}</div>
        `;
        
        if (!isMaxed) {
            upgradeElement.addEventListener('click', () => {
                if (game.levs >= cost) {
                    game.levs -= cost;
                    upgrade.level++;
                    
                    if (upgrade.id === 'farm' || upgrade.id === 'fabrika') {
                        game.levsPerClick = 1 + game.upgrades[0].effect(game.upgrades[0].level) + game.upgrades[3].effect(game.upgrades[3].level);
                    } else {
                        game.levsPerSecond = game.upgrades[1].effect(game.upgrades[1].level) + game.upgrades[2].effect(game.upgrades[2].level) + game.upgrades[4].effect(game.upgrades[4].level);
                    }
                    
                    updateDisplay();
                    renderUpgrades();
                    checkAchievements();
                    renderInventory();
                    saveGame();
                }
            });
        }
        
        upgradesList.appendChild(upgradeElement);
    });
}

function renderAchievements() {
    achievementsGrid.innerHTML = '';
    
    game.achievements.forEach(achievement => {
        const achievementElement = document.createElement('div');
        achievementElement.className = `achievement ${achievement.unlocked ? 'unlocked' : ''}`;
        
        achievementElement.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-name">${achievement.name}</div>
            <div class="achievement-description">${achievement.description}</div>
        `;
        
        achievementsGrid.appendChild(achievementElement);
    });
}

function renderInventory() {
    inventoryGrid.innerHTML = '';
    
    const bigInventoryDiv = document.createElement('div');
    bigInventoryDiv.className = 'big-inventory-container';
    
    const inventoryTitle = document.createElement('h2');
    inventoryTitle.className = 'inventory-title';
    inventoryTitle.textContent = '–∫–∞–∫–≤–æ –∏–º–∞—à? –ü–ò–ó–î–ï–¶, –¢–û–õ–¨–ö–û –ü–ò–ó–î–ï–¶!!!!';
    bigInventoryDiv.appendChild(inventoryTitle);
    
    const inventoryContent = document.createElement('div');
    inventoryContent.className = 'inventory-content';
    
    game.upgrades.forEach(upgrade => {
        if (upgrade.level > 0) {
            const inventoryItem = document.createElement('div');
            inventoryItem.className = 'inventory-item';
            
            const maxPerRow = 10;
            const fullRows = Math.floor(upgrade.level / maxPerRow);
            const remainingEmojis = upgrade.level % maxPerRow;
            
            let emojiDisplay = '';
            for (let i = 0; i < fullRows; i++) {
                emojiDisplay += `<div class="emoji-row">${upgrade.emoji.repeat(maxPerRow)}</div>`;
            }
            if (remainingEmojis > 0) {
                emojiDisplay += `<div class="emoji-row">${upgrade.emoji.repeat(remainingEmojis)}</div>`;
            }
            
            inventoryItem.innerHTML = `
                <div class="inventory-text">
                    <div class="inventory-name">${upgrade.name}</div>
                    <div class="inventory-level">–Ω–∏–≤–æ: ${upgrade.level}</div>
                </div>
                <div class="inventory-emojis">
                    ${emojiDisplay}
                </div>
            `;
            
            inventoryContent.appendChild(inventoryItem);
        }
    });
    
    if (inventoryContent.children.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-inventory';
        emptyMessage.textContent = '—Å–∫—ä–ø–µ—Ä–Ω–∏–∫';
        inventoryContent.appendChild(emptyMessage);
    }
    
    bigInventoryDiv.appendChild(inventoryContent);
    inventoryGrid.appendChild(bigInventoryDiv);
}

function checkAchievements() {
    game.achievements.forEach(achievement => {
        if (!achievement.unlocked && achievement.check()) {
            achievement.unlocked = true;
            showNotification(`–æ—Ç–∫–ª—É—á–µ–Ω–æ: ${achievement.name}`);
            renderAchievements();
        }
    });
}

function showNotification(message) {
    notification.textContent = message;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

mineButton.addEventListener('click', () => {
    const levsGained = game.levsPerClick;
    game.levs += levsGained;
    game.totalLevsMined += levsGained;
    game.clickCount++;
    
    const mineSound = document.getElementById('mineSound');
    mineSound.currentTime = 0;
    mineSound.play().catch(e => console.log("Mine sound playback failed:", e));

    const levFloat = document.createElement('div');
    levFloat.className = 'lev-float';
    levFloat.textContent = `+${formatNumber(levsGained)}`;
    
    const rect = mineButton.getBoundingClientRect();
    const x = rect.left + rect.width / 2 + (Math.random() * 80 - 40);
    const y = rect.top + rect.height / 2 + (Math.random() * 80 - 40);
    
    levFloat.style.left = `${x}px`;
    levFloat.style.top = `${y}px`;
    
    document.body.appendChild(levFloat);
    
    setTimeout(() => {
        document.body.removeChild(levFloat);
    }, 2000);
    
    updateDisplay();
    checkAchievements();
});

function produceLevsAutomatically() {
    if (game.levsPerSecond > 0) {
        const now = Date.now();
        const deltaTime = (now - game.lastSave) / 1000;
        const levsGained = game.levsPerSecond * deltaTime;
        
        game.levs += levsGained;
        game.totalLevsMined += levsGained;
        game.lastSave = now;
        
        updateDisplay();
        checkAchievements();
    }
}

function saveGame() {
    const saveData = {
        levs: game.levs,
        levsPerClick: game.levsPerClick,
        levsPerSecond: game.levsPerSecond,
        totalLevsMined: game.totalLevsMined,
        clickCount: game.clickCount,
        lastSave: Date.now(),
        upgrades: game.upgrades.map(upgrade => ({ id: upgrade.id, level: upgrade.level })),
        achievements: game.achievements.map(achievement => ({ id: achievement.id, unlocked: achievement.unlocked }))
    };
    
    localStorage.setItem('levMinerSave', JSON.stringify(saveData));
}

function loadGame() {
    const saveData = localStorage.getItem('levMinerSave');
    
    if (saveData) {
        const parsed = JSON.parse(saveData);
        
        game.levs = parsed.levs;
        game.levsPerClick = parsed.levsPerClick;
        game.levsPerSecond = parsed.levsPerSecond;
        game.totalLevsMined = parsed.totalLevsMined;
        game.clickCount = parsed.clickCount;
        
        if (parsed.upgrades) {
            parsed.upgrades.forEach(savedUpgrade => {
                const upgrade = game.upgrades.find(u => u.id === savedUpgrade.id);
                if (upgrade) {
                    upgrade.level = savedUpgrade.level;
                }
            });
        }
        
        if (parsed.achievements) {
            parsed.achievements.forEach(savedAchievement => {
                const achievement = game.achievements.find(a => a.id === savedAchievement.id);
                if (achievement) {
                    achievement.unlocked = savedAchievement.unlocked;
                }
            });
        }
        
        game.levsPerClick = 1 + game.upgrades[0].effect(game.upgrades[0].level) + game.upgrades[3].effect(game.upgrades[3].level);
        game.levsPerSecond = game.upgrades[1].effect(game.upgrades[1].level) + game.upgrades[2].effect(game.upgrades[2].level) + game.upgrades[4].effect(game.upgrades[4].level);
        
        if (parsed.lastSave) {
            const now = Date.now();
            const offlineTime = (now - parsed.lastSave) / 1000;
            
            if (offlineTime > 5 && game.levsPerSecond > 0) {
                const offlineLevs = game.levsPerSecond * Math.min(offlineTime, 86400);
                game.levs += offlineLevs;
                game.totalLevsMined += offlineLevs;
                
                showNotification(`–ß–µ—Å—Ç–∏—Ç–∫–∏! –ó–∞—Ä–∞–±–æ—Ç–∏ ${formatNumber(offlineLevs)} –ª–≤ –¥–æ–¥–µ–∫–∞ –±–µ–≤—Ç–µ –æ—Ç—Å—É—Ç–Ω–∏.`);
            }
        }
        
        game.lastSave = Date.now();
    }
}

function gameLoop() {
    produceLevsAutomatically();
    requestAnimationFrame(gameLoop);
}

function init() {
    loadGame();
    updateDisplay();
    renderUpgrades();
    renderAchievements();
    renderInventory();
    gameLoop();
    
    setInterval(saveGame, 30000);
}

init();